<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>François Pacaud</title><link href="frapac.github.io/" rel="alternate"></link><link href="frapac.github.io/atom.xml" rel="self"></link><id>frapac.github.io/</id><updated>2020-06-22T10:09:57+02:00</updated><entry><title>Mapping the French mathematical optimization community (Part I)</title><link href="frapac.github.io/2020/06/1_graph_analysis/" rel="alternate"></link><published>2020-06-19T00:00:00+02:00</published><updated>2020-06-22T10:09:57+02:00</updated><author><name>François Pacaud</name></author><id>tag:None,2020-06-19:frapac.github.io/2020/06/1_graph_analysis/</id><summary type="html">&lt;p&gt;Analyzing the coauthorship network of the French optimization community to find the most influential researchers.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Academics often rely on different metrics,
such as the &lt;em&gt;i10&lt;/em&gt; or &lt;em&gt;h-index&lt;/em&gt;, to determine how influential is a researcher.
However, I believe these metrics say little on how close is the researcher to her
affiliated community. Here, we look more closely on the &lt;em&gt;coauthorship network&lt;/em&gt;
of the optimization community in France to try to map out influential
researchers and to depict the different subcommunities we could find. I believe
that such analysis could prove useful for newcomers to the community and
young researchers like me.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/coauthors/graph_force.jpg" width="70%"&gt;
&lt;center&gt;&lt;em&gt;Displaying the coauthorship network with Gephi&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Recall that here we rely on the
coauthorship network of the French mathematical optimization community.
To do so, we have at our disposal a database of the articles published in &lt;a href="https://hal.archives-ouvertes.fr/"&gt;HAL&lt;/a&gt;.
This database was built in a &lt;a href="/2020/06/0_coauthor_processing/"&gt;previous post&lt;/a&gt;, where we detailed how to parse
a bibtex file
to generate the coauthorship network with &lt;code&gt;networkx&lt;/code&gt;. We ended up by exporting
a graph in &lt;code&gt;graphml&lt;/code&gt; format. In this previous post, we also exhibited the limit of our
approach, which still hold true here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most of the articles (79%) in our database have been published after 2010.
  We miss the ancient history of the community.&lt;/li&gt;
&lt;li&gt;We are using HAL, a service used mostly in France. We miss the collaborations
  with labs outside France.&lt;/li&gt;
&lt;li&gt;We extracted only the article published under the mathematical optimization
  (math-oc) tag. So our analysis will short fall when dealing with researchers
  disseminating their works in different communities (e.g. operation research, automatics, signal
  processing, machine learning...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having in mind these shortfalls,
we would like now to push further the analysis.
In the next, we show how to import the coauthorship network
into &lt;a href="https://github.com/JuliaGraphs/LightGraphs.jl"&gt;LightGraphs&lt;/a&gt;, a graph library implemented in pure Julia.
We extract the largest connected component, and derive some
statistics about it. We then stress out the most central researchers
in the community by using different &lt;a href="https://en.wikipedia.org/wiki/Centrality"&gt;centrality&lt;/a&gt; measures.
We will focus on the detection of subcommunities in a future blog post.&lt;/p&gt;
&lt;p&gt;In case, all source code is &lt;a href="https://github.com/frapac/carnets/blob/master/blog/coauthors/coauthors.jl"&gt;available on github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Why using LightGraphs?&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;In the &lt;a href="/2020/06/0_coauthor_processing/"&gt;previous post&lt;/a&gt;
we started the preprocessing by using Python. So why not stick to Python
and use &lt;code&gt;networkx&lt;/code&gt; for the remaining of our analysis?
The thing here is that &lt;code&gt;networkx&lt;/code&gt; tends to be
slow (and I had bad experience with memory leaks occurring when analyzing
large networks). The libraries &lt;a href="https://networkit.github.io"&gt;networkit&lt;/a&gt; and &lt;a href="https://graph-tool.skewed.de/"&gt;graph-tools&lt;/a&gt; are valid
alternatives, but come with a few caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After testing up a bit &lt;code&gt;networkit&lt;/code&gt;, I was a bit puzzled by the lack
  of documentation. Most of the time, the docstring in the C++ wrapper
  are missing, and I had some trouble figuring out how exactly to use the different
  functions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;graph-tools&lt;/code&gt; is impressive (really, you should check &lt;a href="https://graph-tool.skewed.de/static/doc/demos/inference/inference.html"&gt;the tutorials&lt;/a&gt;).
  To the best of my knowledge, it is one of the graph libraries
  offering among the most advanced
  algorithms for community detection, based on &lt;em&gt;Stochastic Block Model&lt;/em&gt; (SBM) analysis. However, I could not
  choose &lt;code&gt;graph-tools&lt;/code&gt; as I am currently working on my good old personal laptop,
  which comes with only 4Go of RAM. Thus, I am unable to compile &lt;code&gt;graph-tool&lt;/code&gt;,
  as &lt;a href="https://git.skewed.de/count0/graph-tool/-/wikis/installation-instructions#memory-requirements-for-compilation"&gt;it requires at least 3Go of RAM&lt;/a&gt;
  and more than 1h to be compiled (I guess that's the price to depend on &lt;code&gt;boost::graph&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the contrary, &lt;a href="https://github.com/JuliaGraphs/LightGraphs.jl"&gt;LightGraphs&lt;/a&gt; achieves pretty good performance (as stated
in this &lt;a href="https://www.timlrx.com/2020/05/10/benchmark-of-popular-graph-network-packages-v2/"&gt;benchmark&lt;/a&gt;) and is a lightweight library.
It is written entirely in Julia, and relying on
a language with built-in linear algebra will prove useful for the next post,
where we will focus on the detection of communities in our graph.&lt;/p&gt;
&lt;p&gt;Using Julia will also allow us to use the excellent &lt;a href="https://github.com/Evizero/UnicodePlots.jl"&gt;UnicodePlots&lt;/a&gt; library
for plotting our results directly in the terminal.&lt;/p&gt;
&lt;h2&gt;Setting-up the environment&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Now that we are all set, we could start our analysis.&lt;/p&gt;
&lt;h3&gt;Importing the package&lt;/h3&gt;
&lt;p&gt;We start by importing some usual packages:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;LinearAlgebra&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Statistics&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and our graph library:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;LightGraphs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will need also the following packages to load a network specified
in &lt;code&gt;graphml&lt;/code&gt; format and the metadata from the CSV file.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Packages to import graph from GraphML format&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;EzXML&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;GraphIO&lt;/span&gt;
&lt;span class="c1"&gt;# Package to handle dataframes in Julia&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;DataFrames&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;CSV&lt;/span&gt;
&lt;span class="c1"&gt;# For plotting&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnicodePlots&lt;/span&gt;
&lt;span class="c1"&gt;# For printing&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Printf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Loading the coauthorship network to LightGraphs&lt;/h3&gt;
&lt;p&gt;We first load the coauthorship network into our graph library.
We start by setting the path to the input graph, which should be, if
we follow the naming of the &lt;a href="/2020/06/0_coauthor_processing/"&gt;previous post&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;GRAPH_SRC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;coauthors.graphml&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We use &lt;code&gt;GraphIO&lt;/code&gt; to load the graph into &lt;code&gt;LightGraphs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GraphIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GraphML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GraphMLFormat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loadgraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GRAPH_SRC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We now get a valid &lt;code&gt;LightGraphs&lt;/code&gt; graph.&lt;/p&gt;
&lt;h3&gt;Loading the metadata&lt;/h3&gt;
&lt;p&gt;We import the metadata as a &lt;code&gt;DataFrame&lt;/code&gt;, so we could associate to each node
of the graph a corresponding author in the community:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CSV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;metadata.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looking more closely at the first row, we get:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;julia&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;DataFrameRow&lt;/span&gt;
&lt;span class="n"&gt;│&lt;/span&gt; &lt;span class="n"&gt;Row&lt;/span&gt; &lt;span class="n"&gt;│&lt;/span&gt; &lt;span class="n"&gt;Column1&lt;/span&gt;   &lt;span class="n"&gt;│&lt;/span&gt; &lt;span class="n"&gt;Column2&lt;/span&gt; &lt;span class="n"&gt;│&lt;/span&gt; &lt;span class="n"&gt;Column3&lt;/span&gt;                  &lt;span class="n"&gt;│&lt;/span&gt;
&lt;span class="n"&gt;│&lt;/span&gt;     &lt;span class="n"&gt;│&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;   &lt;span class="n"&gt;│&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;  &lt;span class="n"&gt;│&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;                   &lt;span class="n"&gt;│&lt;/span&gt;
&lt;span class="n"&gt;├─────┼───────────┼─────────┼──────────────────────────┤&lt;/span&gt;
&lt;span class="n"&gt;│&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="n"&gt;│&lt;/span&gt; &lt;span class="n"&gt;bonnans&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;│&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="n"&gt;│&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Bonnans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Frederic&lt;/span&gt;&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;│&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I confess I forgot to specify correctly the names for each column...
The first column corresponds to the &lt;code&gt;key&lt;/code&gt; we designed in the previous article.
The second column is the &lt;code&gt;id&lt;/code&gt; of the corresponding node in the graph. Then,
the third column gives the associated name(s).&lt;/p&gt;
&lt;p&gt;To get a nicer display,
we build up a function &lt;code&gt;get_name&lt;/code&gt; which takes as input an index and returns the
corresponding author in the dataframe &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parse_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;regs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;r&amp;quot;\&amp;#39;(.*?)\&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sr"&gt;r&amp;quot;\&amp;quot;(.*?)\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;reg&lt;/span&gt; &lt;span class="kp"&gt;in&lt;/span&gt; &lt;span class="n"&gt;regs&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nb"&gt;nothing&lt;/span&gt;
            &lt;span class="c"&gt;# Remove matching &amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;get_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# Get raw name from dataframe&lt;/span&gt;
    &lt;span class="n"&gt;raw_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parse_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and we get:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;julia&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;Bonnans, J. Frederic&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which is a lot more better :)&lt;/p&gt;
&lt;p&gt;Now, we have everything set up to begin our analysis.&lt;/p&gt;
&lt;h2&gt;Splitting the community in connected components&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;We first focus on the connected components in the community.
Indeed, there is a little chance that the global graph &lt;code&gt;g&lt;/code&gt; is connected.
But if we are lucky, we could extract a connected component large enough to be
meaningful for our analysis.&lt;/p&gt;
&lt;p&gt;The global graph &lt;code&gt;g&lt;/code&gt; has 7487 nodes and 19046 edges. Looking at it more closely,
it appears that the graph is not connected:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;julia&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;is_connected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's analyze the different connected components. We first extract
them from the original graph &lt;code&gt;g&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;connected_graphs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connected_components&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and we get 534 subgraphs ... which is large. It appears that the community
is quite balkanized. Let's analyze the number of nodes in each connected
components:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;number_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="kp"&gt;in&lt;/span&gt; &lt;span class="n"&gt;connected_graphs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;# Sort the results inplace&lt;/span&gt;
&lt;span class="n"&gt;sort!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looking more closely at the ten most populated subgraphs, we get&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;julia&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number_nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;Int64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="mi"&gt;5856&lt;/span&gt;
   &lt;span class="mi"&gt;44&lt;/span&gt;
   &lt;span class="mi"&gt;20&lt;/span&gt;
   &lt;span class="mi"&gt;19&lt;/span&gt;
   &lt;span class="mi"&gt;18&lt;/span&gt;
   &lt;span class="mi"&gt;17&lt;/span&gt;
   &lt;span class="mi"&gt;16&lt;/span&gt;
   &lt;span class="mi"&gt;16&lt;/span&gt;
   &lt;span class="mi"&gt;15&lt;/span&gt;
   &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the largest subgraph has 5856 authors, whereas the second one has
only 44 authors, which is less than 2 orders of magnitude lower.
In fact, if we remove
the largest connected component (those with 5856 authors),
the remaining subgraphs have in average only 3 authors.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;julia&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Average number of nodes: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="mf"&gt;3.0600375234521575&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So we could guess that almost all these micro-communities are issued by
single articles.&lt;/p&gt;
&lt;p&gt;For the remaining, we will discard all connected components except the
largest one. We build a new subgraph &lt;code&gt;sg&lt;/code&gt;, that we will consider as the core of the
optimization community. In &lt;code&gt;LightGraphs&lt;/code&gt; syntax, that translates to&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# Get first connected component&lt;/span&gt;
&lt;span class="n"&gt;sv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connected_components&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;induced_subgraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The index &lt;code&gt;sv&lt;/code&gt; allows to keep a correspondance between the indexes of the
nodes in the largest connected component &lt;code&gt;sg&lt;/code&gt; and the nodes in the original graph
&lt;code&gt;g&lt;/code&gt; (which themselves correspond to the index in the file &lt;code&gt;metadata.txt&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;From now on, the term &lt;em&gt;graph&lt;/em&gt; and &lt;em&gt;network&lt;/em&gt; will consist in the subgraph
&lt;code&gt;sg&lt;/code&gt;, and we will discard the original graph &lt;code&gt;g&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Looking more closely at the largest subgraph&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Now that we have managed to extract the largest connected component, we could
derive some statistics about it. First, we extract the number of neighbors
(which is, in our case, the number of coauthors) for each author in our
graph:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;deg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;degree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We also compute the diameter of our graph:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;diam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and print out basic information about the graph &lt;code&gt;sg&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Nodes: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Edges: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Max degree: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maximum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Average degree: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Diameter: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Density: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Nodes: &lt;span class="m"&gt;5856&lt;/span&gt;
Edges: &lt;span class="m"&gt;16701&lt;/span&gt;
Max degree: &lt;span class="m"&gt;152&lt;/span&gt;
Average degree: &lt;span class="m"&gt;5&lt;/span&gt;.703893442622951
Diameter: &lt;span class="m"&gt;15&lt;/span&gt;
Density: &lt;span class="m"&gt;0&lt;/span&gt;.0009741918774761658
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In plain English, that transposes to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have a community with 5856 authors and 16701 coauthorships;&lt;/li&gt;
&lt;li&gt;The most connected author has 152 coauthors (which in my opinion is impressive,
  especially in math);&lt;/li&gt;
&lt;li&gt;Each author has in average 5.7 coauthors&lt;/li&gt;
&lt;li&gt;The longest distance between two authors is 15.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we look more closely at the distribution of the number of coauthors:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;histogram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xscale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                  ┌                                        ┐
   [  0.0,   5.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 3617
   [  5.0,  10.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 1499
   [ 10.0,  15.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 362
   [ 15.0,  20.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 177
   [ 20.0,  25.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 67
   [ 25.0,  30.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 33
   [ 30.0,  35.0) ┤▇▇▇▇▇▇▇▇▇▇▇ 15
   [ 35.0,  40.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 27
   [ 40.0,  45.0) ┤▇▇▇▇▇▇▇▇▇▇▇▇▇ 24
   [ 45.0,  50.0) ┤▇▇▇▇▇▇▇▇▇▇ 10
   [ 50.0,  55.0) ┤▇▇▇ 2
   [ 55.0,  60.0) ┤▇▇▇▇▇▇▇▇ 7
   [ 60.0,  65.0) ┤ 1
   [ 65.0,  70.0) ┤▇▇▇▇▇ 3
   [ 70.0,  75.0) ┤▇▇▇ 2
   [ 75.0,  80.0) ┤▇▇▇ 2
   [ 80.0,  85.0) ┤ 1
   [ 85.0,  90.0) ┤▇▇▇▇▇ 3
   [ 90.0,  95.0) ┤ 1
   [ 95.0, 100.0) ┤ 0
   [100.0, 105.0) ┤ 0
   [105.0, 110.0) ┤ 0
   [110.0, 115.0) ┤ 1
   [115.0, 120.0) ┤ 0
   [120.0, 125.0) ┤ 0
   [125.0, 130.0) ┤ 1
   [130.0, 135.0) ┤ 0
   [135.0, 140.0) ┤ 0
   [140.0, 145.0) ┤ 0
   [145.0, 150.0) ┤ 0
   [150.0, 155.0) ┤ 1
                  └                                        ┘
                              Frequency [log10]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We observe that 3617 authors have less than 5 coauthors, and 5116 have
less than 10 coauthors (that is, 87% of the community). The distribution
is heavy-tailed, with only 25 authors having more than 50 coauthors.&lt;/p&gt;
&lt;h3&gt;Degree distribution&lt;/h3&gt;
&lt;p&gt;We now display the degree distribution in our community.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;deg_distrib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;degree_histogram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;deg_keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deg_distrib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;collect&lt;/span&gt;
&lt;span class="n"&gt;deg_vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deg_distrib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;collect&lt;/span&gt;

&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scatterplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deg_keys&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deg_vals&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;xlabel!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;log degree&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ylabel!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;|nodes|&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;           ┌────────────────────────────────────────┐
         4 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠂⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
           │⡀⠀⠀⠀⠀⠀⠀⠀⠁⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⢂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
 |nodes|   │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
  (log)    │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠒⠊⡂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⡀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢄⡂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠔⠱⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
           │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⡈⠁⣀⠁⣀⡈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
         0 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⢀⡀⡀⡀⡀⡀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
           └────────────────────────────────────────┘
           0                                        3
                          log degree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we observe that the degree distribution has an asymptotic
behavior when the degree &lt;span class="math"&gt;\(k\)&lt;/span&gt; becomes large. That would tend to
say that our network is &lt;a href="https://en.wikipedia.org/wiki/Scale-free_network"&gt;Scale-free&lt;/a&gt;, that is, the fraction &lt;span class="math"&gt;\(p(k)\)&lt;/span&gt; of nodes
having a degree equal to &lt;span class="math"&gt;\(k\)&lt;/span&gt; satisfies asymptotically
&lt;/p&gt;
&lt;div class="math"&gt;$$
p(k) \sim k^{-\gamma}
$$&lt;/div&gt;
&lt;p&gt;
where &lt;span class="math"&gt;\(\gamma\)&lt;/span&gt; is a given parameter. However, without further statistical
analysis, the &lt;em&gt;scale-free&lt;/em&gt; nature of our community remains hypothetical.&lt;/p&gt;
&lt;h3&gt;Average distance between two authors&lt;/h3&gt;
&lt;p&gt;We now aim at computing the &lt;em&gt;average distance&lt;/em&gt; between two authors in the graph.
We know that the diameter of the graph is equal to 15, so the average distance
should be below this value. We use a naive algorithm, by iterating over
all authors and computing their distance w.r.t. all other authors using the
Bellman-Ford algorithm:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;avg_distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Float64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kp"&gt;in&lt;/span&gt; &lt;span class="n"&gt;eachindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avg_distance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bellman_ford_shortest_paths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;avg_distance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We get as average distance in our graph:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;julia&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avg_distance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;6.244723488962793&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, the average distance is equal to 6.2. In average, we could linked any
pair of two authors by using less than 7 coauthorship relations.&lt;/p&gt;
&lt;p&gt;We are now able to compute the author at the center of the community, in the sense
that his average shortest distance with other authors is the lowest.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# Get index in subgraph sg&lt;/span&gt;
&lt;span class="n"&gt;author_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avg_distance&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;# Get index in original graph g&lt;/span&gt;
&lt;span class="n"&gt;original_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;author_min&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;# Extract corresponding name&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;Trelat, Emmanuel&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So if we follow that metric, &lt;a href="https://www.ljll.math.upmc.fr/trelat/"&gt;Emmanuel Trélat&lt;/a&gt; is the most central author
in the optimization community. This is not surprising, as Emmanuel Trélat is
one of the most notorious optimization researcher in France :)
However, it is legitimate to wonder if this metric is the most appropriate
to determine the centrality in our graph.&lt;/p&gt;
&lt;h2&gt;Comparing different centrality measures&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;In fact, the notion of &lt;a href="https://en.wikipedia.org/wiki/Centrality"&gt;centrality&lt;/a&gt; in a graph depends a lot on
the metrics used. Further, we are studying an undirected graph, and
not all centrality measures generalize well to handle undirected graph.
We compare here
different metrics together and observe how differently they rank the authors
in term of their centrality.&lt;/p&gt;
&lt;p&gt;We try out different centrality measures, all implemented in &lt;code&gt;LightGraphs&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Closeness centrality&lt;/em&gt; measures the average shortest distance between
  an author and all other authors in the community. It is exactly the centrality
  we computed in the previous paragraph.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Betweenness centrality&lt;/em&gt; measures the number of times an author is found
  inside a shortest path between two different authors.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Degree centrality&lt;/em&gt; measures the connectivity of each author, in term
  of number of coauthors.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Eigenvector centrality&lt;/em&gt; is a more complex measure, relying on concept
  from linear algebra. Let &lt;span class="math"&gt;\(A = (a_{ij})_{ij}\)&lt;/span&gt; be the adjacency matrix of the graph
  (i.e. such that &lt;span class="math"&gt;\(a_{ij} = 1\)&lt;/span&gt; if and only if node &lt;span class="math"&gt;\(i\)&lt;/span&gt; and &lt;span class="math"&gt;\(j\)&lt;/span&gt; are linked).
  The matrix &lt;span class="math"&gt;\(A\)&lt;/span&gt; is real symmetric and comprises only positive values, hence
  the Perron-Frobenius theorem states there exists a unique largest eigenvalue
  &lt;span class="math"&gt;\(\lambda\)&lt;/span&gt;. Eigenvector centrality looks at one of the associated
  eigenvector &lt;span class="math"&gt;\(x^\lambda\)&lt;/span&gt; (possibly normalized to ensure unicity),
  satisfying &lt;span class="math"&gt;\(A x^\lambda = \lambda x^\lambda\)&lt;/span&gt;. Then, the centrality of each node
  is set equal to &lt;span class="math"&gt;\(x^\lambda_i\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pagerank&lt;/em&gt; is a variant of eigenvector centrality, and adds a random
  jump assumption. Let &lt;span class="math"&gt;\(N = (n_{ij})_{ij}\)&lt;/span&gt; be the normalized adjacency matrix
  (such that &lt;span class="math"&gt;\(n_{ij} = 1 / deg(i)\)&lt;/span&gt; if node &lt;span class="math"&gt;\(i\)&lt;/span&gt; and &lt;span class="math"&gt;\(j\)&lt;/span&gt; are connected). Then
  Pagerank ranks the nodes in the graph according to the vector &lt;span class="math"&gt;\(p\)&lt;/span&gt; satisfying
  &lt;span class="math"&gt;\(p = \alpha N^\top p + \frac{1 - \alpha}{N}\)&lt;/span&gt;, where we usually take
  &lt;span class="math"&gt;\(\alpha = 0.85\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that despite we start from simple algorithms to measure centrality,
we end up with algorithm relying deeply on linear algebra. Connections
between graph theory and linear algebra are indeed fascinating, and lay down
the path to &lt;a href="https://en.wikipedia.org/wiki/Spectral_graph_theory"&gt;spectral graph theory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We write up a small function to display the &lt;code&gt;n&lt;/code&gt; most central authors
according to a centrality measure &lt;code&gt;metrics&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;classement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sortperm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# From largest to lowest&lt;/span&gt;
    &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;classement&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nd"&gt;@printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;* &lt;/span&gt;&lt;span class="si"&gt;%-4s&lt;/span&gt;&lt;span class="s"&gt;   (&lt;/span&gt;&lt;span class="si"&gt;%7s&lt;/span&gt;&lt;span class="s"&gt;) &lt;/span&gt;&lt;span class="si"&gt;%-30s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kp"&gt;in&lt;/span&gt; &lt;span class="n"&gt;eachindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="nd"&gt;@printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;* &lt;/span&gt;&lt;span class="si"&gt;%-4d&lt;/span&gt;&lt;span class="s"&gt; * (&lt;/span&gt;&lt;span class="si"&gt;%.1e&lt;/span&gt;&lt;span class="s"&gt;) &lt;/span&gt;&lt;span class="si"&gt;%-35s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As expected, we get different results if we use different centrality measures.
We now look more closely at the 10 most central authors obtained with each
centrality measure.&lt;/p&gt;
&lt;h3&gt;Closeness centrality&lt;/h3&gt;
&lt;p&gt;We first compute a ranking based on &lt;em&gt;closeness centrality&lt;/em&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;closeness_centrality&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;* #      (  Score) Name
* 1    * (2.6e-01) Trelat, Emmanuel                    *
* 2    * (2.6e-01) Henrion, Didier                     *
* 3    * (2.5e-01) Lasserre, Jean-Bernard              *
* 4    * (2.4e-01) Malick, Jerome                      *
* 5    * (2.4e-01) Bonnans, J. Frederic                *
* 6    * (2.4e-01) Prieur, Christophe                  *
* 7    * (2.4e-01) Bergounioux, Maitine                *
* 8    * (2.4e-01) Ngueveu, Sandra Ulrich              *
* 9    * (2.3e-01) Delahaye, Daniel                    *
* 10   * (2.3e-01) Caillau, Jean-Baptiste              *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As before, &lt;a href="https://www.ljll.math.upmc.fr/trelat/"&gt;Emmanuel Trélat&lt;/a&gt; is the most central author according to this
measure, followed closely by &lt;a href="https://homepages.laas.fr/henrion/"&gt;Didier Henrion&lt;/a&gt; and &lt;a href="http://homepages.laas.fr/lasserre/"&gt;Jean-Bernard Lasserre&lt;/a&gt;
(both members of the LAAS laboratory). Then come &lt;a href="https://ljk.imag.fr/membres/Jerome.Malick/"&gt;Jérôme Malick&lt;/a&gt;, from
Université de Grenoble, and &lt;a href="http://www.cmap.polytechnique.fr/~bonnans/"&gt;Frédéric Bonnans&lt;/a&gt;, from CMAP.&lt;/p&gt;
&lt;p&gt;&lt;a href="/pdfs/coauthors/closeness_centrality.txt"&gt;Full results here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Looking more closely at the results, we observe that authors closed
to the authors in the center of the graph automatically get a high score,
by construction. So doing a PhD with a top researcher automatically
gives you a good score according to this measure.&lt;/p&gt;
&lt;h3&gt;Betweenness centrality&lt;/h3&gt;
&lt;p&gt;We now focus on the ranking given by &lt;em&gt;betweenness centrality&lt;/em&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;betweenness_centrality&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;* #      (  Score) Name
* 1    * (1.4e-01) Trelat, Emmanuel                    *
* 2    * (9.9e-02) Henrion, Didier                     *
* 3    * (9.3e-02) Delahaye, Daniel                    *
* 4    * (7.5e-02) Lasserre, Jean-Bernard              *
* 5    * (7.4e-02) Malick, Jerome                      *
* 6    * (7.2e-02) Bonnans, J. Frederic                *
* 7    * (6.3e-02) Siarry, P. .                        *
* 8    * (4.9e-02) Mertikopoulos, Panayotis            *
* 9    * (4.6e-02) Ngueveu, Sandra Ulrich              *
* 10   * (4.5e-02) Bergounioux, Maitine                *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We get the same two first authors as before with closeness centrality, but
&lt;a href="http://recherche.enac.fr/~delahaye/"&gt;Daniel Delahaye&lt;/a&gt;, from ENAC, becomes the third most connected author, in place of
&lt;a href="http://homepages.laas.fr/lasserre/"&gt;Jean-Bernard Lasserre&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="/pdfs/coauthors/betweenness_centrality.txt"&gt;Full results here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Eigenvector centrality&lt;/h3&gt;
&lt;p&gt;If we look now at &lt;em&gt;eigenvector centrality&lt;/em&gt;, we get a different list:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eigenvector_centrality&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;* #      (  Score) Name
* 1    * (1.7e-01) Henrion, Didier                     *
* 2    * (1.6e-01) Lasserre, Jean-Bernard              *
* 3    * (1.6e-01) Ngueveu, Sandra Ulrich              *
* 4    * (1.6e-01) Artigues, Christian                 *
* 5    * (1.6e-01) Magron, Victor                      *
* 6    * (1.6e-01) Tanwani, Aneel                      *
* 7    * (1.6e-01) Jauberthie, Carine                  *
* 8    * (1.6e-01) Lopez, Pierre                       *
* 9    * (1.6e-01) Trave-Massuyes, Louise              *
* 10   * (1.6e-01) Joldes, Mioara                      *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most of the authors listed here are researchers affiliated to the &lt;a href="https://www.laas.fr/public/"&gt;LAAS&lt;/a&gt; laboratory.
It appears that the largest eigenvalue of the adjacency matrix &lt;span class="math"&gt;\(A\)&lt;/span&gt; is "related",
to some extent, to this laboratory. It would be interesting to observe
the ranking we get if we look at the second largest eigenvalue, or the third
one.&lt;/p&gt;
&lt;p&gt;&lt;a href="/pdfs/coauthors/eigenvector_centrality.txt"&gt;Full results here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Pagerank&lt;/h3&gt;
&lt;p&gt;Eventually, we apply &lt;em&gt;pagerank&lt;/em&gt; to our community network (with &lt;span class="math"&gt;\(\alpha=0.85\)&lt;/span&gt;), and get
the following results:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pagerank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;* #      (  Score) Name
* 1    * (3.9e-03) Delahaye, Daniel                    *
* 2    * (3.5e-03) Siarry, P. .                        *
* 3    * (2.7e-03) Bonnans, J. Frederic                *
* 4    * (2.4e-03) Trelat, Emmanuel                    *
* 5    * (2.3e-03) Henrion, Didier                     *
* 6    * (2.2e-03) Mertikopoulos, Panayotis            *
* 7    * (1.9e-03) Girard, Antoine                     *
* 8    * (1.9e-03) d&amp;#39;Andreagiovanni, Fabio             *
* 9    * (1.8e-03) Bergounioux, Maitine                *
* 10   * (1.8e-03) Bach, Francis                       *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, the result looks different. &lt;a href="https://www.ljll.math.upmc.fr/trelat/"&gt;Emmanuel Trélat&lt;/a&gt; and &lt;a href="https://homepages.laas.fr/henrion/"&gt;Didier Henrion&lt;/a&gt; are
still in the top, but the three top authors are now &lt;a href="http://recherche.enac.fr/~delahaye/"&gt;Daniel Delahaye&lt;/a&gt;,
&lt;a href="https://scholar.google.co.in/citations?user=KI2olPkAAAAJ&amp;amp;hl=en"&gt;Patrick Siarry&lt;/a&gt;,from Université Paris-Est Créteil, and &lt;a href="http://www.cmap.polytechnique.fr/~bonnans/"&gt;Frédéric Bonnans&lt;/a&gt;, from
CMAP (Polytechnique).&lt;/p&gt;
&lt;p&gt;&lt;a href="/pdfs/coauthors/pagerank.txt"&gt;Full results here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Core and periphery&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;We finish this study by determining the core and the periphery of the
community. We compute the core of the graph &lt;code&gt;sg&lt;/code&gt; using the algorithm
implemented in &lt;code&gt;LightGraphs&lt;/code&gt;, which follows &lt;a href="https://arxiv.org/abs/1102.5511"&gt;this article&lt;/a&gt;.
It is impressive how fast the algorithm is: it computes the core and the
periphery of the graph in less than 1 second.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;core_periph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;core_periphery_deg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We could now extract the authors at the core of the community:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;core_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;core_periph&lt;/span&gt; &lt;span class="o"&gt;.==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;core_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;core_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We write out this piece of code to print out the authors who are at
the core of the community:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ncols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;nlines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;core_names&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ncols&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kp"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;nlines&lt;/span&gt;
    &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ncols&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="kp"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ncols&lt;/span&gt;
        &lt;span class="nd"&gt;@printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;* &lt;/span&gt;&lt;span class="si"&gt;%-25s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;core_names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="nd"&gt;@printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nlines&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ncols&lt;/span&gt;
&lt;span class="n"&gt;remain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;core_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;ncols&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kp"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;remain&lt;/span&gt;
    &lt;span class="nd"&gt;@printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;* &lt;/span&gt;&lt;span class="si"&gt;%-25s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;core_names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;* Bonnans, J. Frederic     * Zidani, Hasnaa           * Girard, Antoine
* Bach, Francis            * Teytaud, Olivier         * Henrion, Didier
* Sigalotti, Mario         * Gaubert, Stephane        * Trelat, Emmanuel
* Lasserre, Jean-Bernard   * Kariniotakis, Georges    * Malick, Jerome
* Bergounioux, Maitine     * Vidard, Arthur           * Tanwani, Aneel
* Zaccarian, Luca          * Cafieri, Sonia           * Delahaye, Daniel
* Boscain, Ugo             * Rapaport, Alain          * Mertikopoulos, Panayotis
* Puechmorel, Stephane     * Le Riche, Rodolphe       * Le Dimet, Francois-Xavier
* Magron, Victor           * Caillau, Jean-Baptiste   * Joldes, Mioara
* Peyre, Gabriel           * Baudouin, Lucie          * Ngueveu, Sandra Ulrich
* Artigues, Christian      * Lopez, Pierre            * d&amp;#39;Andreagiovanni, Fabio
* Seuret, Alexandre        * Nakib, A.                * Siarry, P. .
* Tarbouriech, Sophie      * Jauberthie, Carine       * Trave-Massuyes, Louise
* Houssin, Laurent         * Queinnec, I.             * Fliess, Michel
* Join, Cedric
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For anybody familiar with the French community, that would not come
as a surprise. In fact, we recognize the most established researchers
in our community. However, I was surprised by the number of researchers
affiliated to the &lt;a href="https://www.laas.fr/public/"&gt;LAAS&lt;/a&gt; laboratory set at the core of the
French optimization community.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;That's finish up our first analysis porting on the optimization community
in France. Through this analysis, we worked on the links existing between
different researchers in France, and exhibited that the coauthorship network
has a large connected component, gathering
almost 78% of all authors; the other connected components were too
small enough to draw any conclusion about them (most of them consist in
only of coauthorship relations issued by a single article).
Looking more closely at the core of the community, we showed that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A vast majority of authors (87%) have less than 10 coauthors ;&lt;/li&gt;
&lt;li&gt;The average distance between two authors is 6.2 articles ;&lt;/li&gt;
&lt;li&gt;Testing out different centrality measures, we establish different
  rankings to depict the most connected authors in the community.
  We get slightly different results, but overall all centrality measures
  highlight well-known researchers in the French optimization community.
  That's was reassuring concerning the validity of our approach!&lt;/li&gt;
&lt;li&gt;Looking more closely at the core of the community, I was surprised by
  the number of people affiliated to the &lt;a href="https://www.laas.fr/public/"&gt;LAAS&lt;/a&gt; appearing in the result. To me,
  this is explainable, as the LAAS is a renowned laboratory, with a lot of
  talented researchers closely connected to each others. The work of
  &lt;a href="http://homepages.laas.fr/lasserre/"&gt;Jean-Bernard Lasserre&lt;/a&gt; and &lt;a href="https://homepages.laas.fr/henrion/"&gt;Didier Henrion&lt;/a&gt; on &lt;a href="https://homepages.laas.fr/lasserre/drupal/content/moments-and-positive-polynomials"&gt;polynomial optimization&lt;/a&gt; and generalized moment problems was
  seminal, and a lot of researchers are referring to it these days.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Personally, this study allows me to discover a lot of researchers in my
community that I have never heard of. Sometimes, the relationships we made
during conferences are only the tip of the iceberg, and looking more closely
at the community could be somewhat refreshing :)&lt;/p&gt;
&lt;p&gt;However, I have to insist that this study comes with some limits.
Indeed, for anyone familiar with the optimization community in France, I guess
that almost all results depicted here were not surprising. Looking at different centrality
measures, we only stressed out the importance of already established researchers
(who all have a well deserved reputation). I think it would be more interesting
to look more closely at the dynamics of the network, to exhibit the authors
having a growing influence over time. That would allow to stress out the
promising careers among the youngest researchers.&lt;/p&gt;
&lt;p&gt;In a next blog post, we will study how to identify the different communities
in our coauthorship network.&lt;/p&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;This post relies heavily on the great package &lt;a href="https://github.com/JuliaGraphs/LightGraphs.jl"&gt;LightGraphs&lt;/a&gt; for its
analysis. I thank warmly the authors for all the great work they did
on this library.&lt;/p&gt;
&lt;h2&gt;Going further&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;For further references, I would recommend having a look at
&lt;a href="https://github.com/briatte/awesome-network-analysis"&gt;this curated list&lt;/a&gt; of hyperlinks on network analysis.
&lt;a href="https://blogs.mathworks.com/loren/2016/08/08/text-mining-machine-learning-research-papers-with-matlab/"&gt;This blog post&lt;/a&gt;
analyses with Matlab the articles published in NeurIPS 2015, and gives
interesting ideas.
I would also recommend having a look at &lt;a href="https://pythonhosted.org/tethne/tutorial.coauthors.html"&gt;tethne&lt;/a&gt;, a Python library
for bibliographic network analysis.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Bibliography"></category><category term="Julia"></category><category term="Lightgraphs"></category><category term="Coauthorship network"></category><category term="Centrality"></category></entry><entry><title>Building a coauthorship network from a bibtex file</title><link href="frapac.github.io/2020/06/0_coauthor_processing/" rel="alternate"></link><published>2020-06-17T00:00:00+02:00</published><updated>2020-06-18T21:33:14+02:00</updated><author><name>François Pacaud</name></author><id>tag:None,2020-06-17:frapac.github.io/2020/06/0_coauthor_processing/</id><summary type="html">&lt;p&gt;How difficult is it to extract a coauthorship network from a bibtex file? An experience using HAL's API.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Have you ever been interested in extracting the coauthorship network
from your bibtex file?
I acknowledge I have been always fascinated by the information we could
extract just by analyzing the coauthorship relations in an
academic community.&lt;/p&gt;
&lt;p&gt;Here, our primary interest is to analyze the relations existing in the optimization
community in France. Indeed, as a member of this community, analyzing the existing
patterns inside the coauthorship network is of particular
interest to me. Furthermore, almost all academics in France publish their
articles via &lt;a href="https://hal.archives-ouvertes.fr/"&gt;HAL&lt;/a&gt; (&lt;em&gt;Hyper Articles en Ligne&lt;/em&gt;), which comes with
a great API to extract data about the articles published.
Thus, building a suitable database is almost straightforward in our case,
as we will show later.
This article explains how to
build a coauthorship network from a large bibtex file, load it into &lt;code&gt;networkx&lt;/code&gt;
and export it to the &lt;code&gt;graphml&lt;/code&gt; format. Note that all the code is available freely
&lt;a href="https://github.com/frapac/carnets/tree/master/blog/coauthors"&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is the first step of a broader work. In future articles, we will
show how to extract useful metrics to analyze the topology of the coauthorship
network.&lt;/p&gt;
&lt;h2&gt;Importing a bibtex file from HAL&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Querying &lt;a href="https://api.archives-ouvertes.fr/"&gt;HAL's API&lt;/a&gt; is not that difficult.
Looking more closely at &lt;a href="https://api.archives-ouvertes.fr/docs/search"&gt;the specifications&lt;/a&gt;,
it appears we have different
choices available for the output format (XML, json, bibtex). So luckily, we could
export the database directly in bibtex, exactly as we want!
Using the bibtex format will help further the analysis, as we could
looks at the coauthorship of each article just
by looking at the &lt;code&gt;author&lt;/code&gt; field in each entry.&lt;/p&gt;
&lt;p&gt;It remains now to build our query.
The subdomain we are interested in is mathematical optimization,
which corresponds to &lt;code&gt;math-oc&lt;/code&gt; in HAL's specification. To select articles published
in this subfield, we add a field &lt;code&gt;domain_s:1.math.math-oc&lt;/code&gt; in our request.
We set the return field to &lt;code&gt;wt=bibtex&lt;/code&gt; to specify the output format.
We should also specify the number of
articles we want to import. By default, HAL returns only 30 articles.
To output all the articles, we increase the limit to 10000
(&lt;code&gt;rows=10000&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The final HTTP request writes out:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget -O raw_export.bib &lt;span class="s2"&gt;&amp;quot;https://api.archives-ouvertes.fr/search/?q=domain_s:1.math.math-oc&amp;amp;wt=bibtex&amp;amp;rows=10000&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that we could easily modify this query to import articles from a different
subfield.&lt;/p&gt;
&lt;p&gt;Once the request finished, we get a valid bibtex database. Now it remains to check
whether the database is clean enough ... and as you could guess, we will
have to do some preprocessing before being able to parse correctly the
database.&lt;/p&gt;
&lt;h2&gt;Preprocessing the bibtex file&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Looking more closely at the bibtex file, it appears that we have two
major problems.&lt;/p&gt;
&lt;p&gt;First, some entries are not well specified. To force LaTeX to parse an entry
without additional reformatting, the authors could enter the fields in double
brace:
&lt;code&gt;{{Please parse this TitlE as specified Here!!}}&lt;/code&gt;. This is a perfectly
valid bibtex specification. But unfortunately some authors entered three
braces &lt;code&gt;}}}&lt;/code&gt; instead
of the two required &lt;code&gt;}}&lt;/code&gt;, leading to errors when parsing the bibtex file.
We replaced the faulty braces manually.&lt;/p&gt;
&lt;p&gt;The other problem is the accentuation. Indeed, LaTeX (and by extension, bibtex)
was designed back in a time when ASCII reigns. People with accentuated names could
enter special characters inside a brace, e.g. &lt;code&gt;{\"i}&lt;/code&gt; is equivalent
to a &lt;code&gt;ï&lt;/code&gt; symbol. In bibtex, almost all accentuated names are
using this convention, which at first glance is perfectly fine. The problem
arises as some names could be accentuated in some articles (&lt;code&gt;Valérie&lt;/code&gt;),
and entered without any accentuation in some other articles (&lt;code&gt;Valerie&lt;/code&gt;). To
avoid further issue, we choose to convert all accentuated characters in ASCII,
by using the following &lt;code&gt;sed&lt;/code&gt; commands (the complete command is available
&lt;a href="https://github.com/frapac/carnets/blob/master/blog/coauthors/parse.sh"&gt;in this script&lt;/a&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;BIBFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;raw_export.bib
sed -i -e &lt;span class="s2"&gt;&amp;quot;s/{\\\&amp;#39;a}/a/g&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -e &lt;span class="s2"&gt;&amp;quot;s/{\\\&amp;#39;e}/e/g&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -e &lt;span class="s2"&gt;&amp;quot;s/{\\\&amp;#39;i}/i/g&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -e &lt;span class="s2"&gt;&amp;quot;s/{\\\&amp;#39;n}/n/g&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -e &lt;span class="s2"&gt;&amp;quot;s/{\\\&amp;#39;o}/o/g&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -e &lt;span class="s2"&gt;&amp;quot;s/{\\\&amp;#39;u}/u/g&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    .
    .
    .
    -e &lt;span class="s1"&gt;&amp;#39;s/{\\ae}/ae/g&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -e &lt;span class="s1"&gt;&amp;#39;s/{\\ss}/ss/g&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;$BIBFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I address my humble apologies to all people who I have ASCIIed the names
without further notice... But hopefully, that would ease the next steps.&lt;/p&gt;
&lt;h2&gt;Loading the base into Python&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Once the bibtex file processed, we could pass it to Python.
To load the bibtex database in Python, we use the great package
&lt;a href="https://bibtexparser.readthedocs.org/"&gt;bibtexparser&lt;/a&gt;. Using this package, importing the database is straightforward:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bibtexparser&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bibtexparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BibTexParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;common_strings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bibname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bibtex_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;bib_database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bibtexparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bibtex_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We could get the total number of articles:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Number of articles: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bib_database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;9197&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's do some basic data analysis on our database. For instance, when
were the articles in our database published? We write a small Python
function to count the number of articles per year:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hist_years&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entrie&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entrie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;years&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We get&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; hist_years&lt;span class="o"&gt;(&lt;/span&gt;bib_database&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;0008&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1978&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1979&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1981&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1983&lt;/span&gt;: &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;1984&lt;/span&gt;: &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;1986&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1987&lt;/span&gt;: &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;1988&lt;/span&gt;: &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;1989&lt;/span&gt;: &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;1990&lt;/span&gt;: &lt;span class="m"&gt;8&lt;/span&gt;
&lt;span class="m"&gt;1991&lt;/span&gt;: &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="m"&gt;1992&lt;/span&gt;: &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="m"&gt;1993&lt;/span&gt;: &lt;span class="m"&gt;14&lt;/span&gt;
&lt;span class="m"&gt;1994&lt;/span&gt;: &lt;span class="m"&gt;31&lt;/span&gt;
&lt;span class="m"&gt;1995&lt;/span&gt;: &lt;span class="m"&gt;17&lt;/span&gt;
&lt;span class="m"&gt;1996&lt;/span&gt;: &lt;span class="m"&gt;31&lt;/span&gt;
&lt;span class="m"&gt;1997&lt;/span&gt;: &lt;span class="m"&gt;32&lt;/span&gt;
&lt;span class="m"&gt;1998&lt;/span&gt;: &lt;span class="m"&gt;37&lt;/span&gt;
&lt;span class="m"&gt;1999&lt;/span&gt;: &lt;span class="m"&gt;39&lt;/span&gt;
&lt;span class="m"&gt;2000&lt;/span&gt;: &lt;span class="m"&gt;57&lt;/span&gt;
&lt;span class="m"&gt;2001&lt;/span&gt;: &lt;span class="m"&gt;48&lt;/span&gt;
&lt;span class="m"&gt;2002&lt;/span&gt;: &lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="m"&gt;2003&lt;/span&gt;: &lt;span class="m"&gt;76&lt;/span&gt;
&lt;span class="m"&gt;2004&lt;/span&gt;: &lt;span class="m"&gt;101&lt;/span&gt;
&lt;span class="m"&gt;2005&lt;/span&gt;: &lt;span class="m"&gt;116&lt;/span&gt;
&lt;span class="m"&gt;2006&lt;/span&gt;: &lt;span class="m"&gt;260&lt;/span&gt;
&lt;span class="m"&gt;2007&lt;/span&gt;: &lt;span class="m"&gt;286&lt;/span&gt;
&lt;span class="m"&gt;2008&lt;/span&gt;: &lt;span class="m"&gt;300&lt;/span&gt;
&lt;span class="m"&gt;2009&lt;/span&gt;: &lt;span class="m"&gt;371&lt;/span&gt;
&lt;span class="m"&gt;2010&lt;/span&gt;: &lt;span class="m"&gt;444&lt;/span&gt;
&lt;span class="m"&gt;2011&lt;/span&gt;: &lt;span class="m"&gt;508&lt;/span&gt;
&lt;span class="m"&gt;2012&lt;/span&gt;: &lt;span class="m"&gt;552&lt;/span&gt;
&lt;span class="m"&gt;2013&lt;/span&gt;: &lt;span class="m"&gt;685&lt;/span&gt;
&lt;span class="m"&gt;2014&lt;/span&gt;: &lt;span class="m"&gt;715&lt;/span&gt;
&lt;span class="m"&gt;2015&lt;/span&gt;: &lt;span class="m"&gt;669&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;: &lt;span class="m"&gt;649&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;: &lt;span class="m"&gt;850&lt;/span&gt;
&lt;span class="m"&gt;2018&lt;/span&gt;: &lt;span class="m"&gt;830&lt;/span&gt;
&lt;span class="m"&gt;2019&lt;/span&gt;: &lt;span class="m"&gt;1025&lt;/span&gt;
&lt;span class="m"&gt;2020&lt;/span&gt;: &lt;span class="m"&gt;356&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we have just depicted the first bias in our analysis: a vast majority (79%)
of the articles stored in our database have been written since 2010. This is
consistent, as HAL was launched back in 2005 by the &lt;em&gt;Centre pour la Communication
Scientifique Directe&lt;/em&gt; (&lt;a href="https://www.ccsd.cnrs.fr/"&gt;CCSD&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Building the graph of co-authors&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;It remains now to build the graph of co-authors. To do so, we scan
the co-authors in each article, and add to the graph the new corresponding edges.&lt;/p&gt;
&lt;h3&gt;Parsing the authors in each article&lt;/h3&gt;
&lt;p&gt;For each article in the database, the authors are specified inside
a string, with the authors' names separated by a &lt;code&gt;and&lt;/code&gt; substring:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Bonnans, J. Frederic and Zidani, Hasnaa&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To get each name individually, we
define a separator &lt;code&gt;AUTHOR_SEPARATOR=and&lt;/code&gt; and we split the string
in as many substrings as authors. That gives the two expected names
for our first entry:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list_authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUTHOR_SEPARATOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bonnans, J. Frederic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Zidani, Hasnaa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By iterating over the database, we could load all names individually and
start building the nodes of our network. But to avoid duplicate in names,
we should take into account one last detail.&lt;/p&gt;
&lt;h3&gt;Affecting a key to each author&lt;/h3&gt;
&lt;p&gt;Indeed, bibtex' conventions lack consistency to specify the authors of a paper.
Imagine your co-author is named &lt;code&gt;Jean-Pierre Dupont&lt;/code&gt;. You could enter
it in bibtex as &lt;code&gt;Dupont, Jean-Pierre&lt;/code&gt;, but &lt;code&gt;Dupont, JP&lt;/code&gt; or &lt;code&gt;Dupont, J.P.&lt;/code&gt;
are also perfectly valid entries. To avoid duplicate in our dataset, we choose
to affect a unique key to each author. We will use a dedicated library
to parse the names, named &lt;code&gt;nameparser&lt;/code&gt;. Then, we could parse each name
individually with the commands:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nameparser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HumanName&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HumanName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Dupont, Jean-Pierre&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Jean&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Pierre&lt;/span&gt; &lt;span class="n"&gt;Dupont&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Jean-Pierre&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Dupont&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or equivalently&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HumanName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Dupont, J.P.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Dupont&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Parsing a name is almost straightforward with &lt;code&gt;nameparser&lt;/code&gt;. Hence, we
could affect a single key to each author, following the procedure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We parse a name (e.g. "Dupont, J.P.") with "nameparser"&lt;/li&gt;
&lt;li&gt;We convert the name to lowercase, to avoid issue with capitalization&lt;/li&gt;
&lt;li&gt;We return as key the last name concatenated with the first letter of the
  first name (so "J.P. Dupont", "J Dupont" and "Jean-Pierre Dupont" would return
  the same key "dupont j")&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This procedure has a single default: two authors with the same last name but
with two first names sharing the same first letter would share the same key
(e.g. &lt;code&gt;Jeanne Dupont&lt;/code&gt; and &lt;code&gt;Jean-Pierre Dupont&lt;/code&gt;).
That was a choice we made: parse correctly composed names (as
&lt;code&gt;Jean-Pierre Dupont&lt;/code&gt;) or parse effectively homonyms. Fortunately, we
have only a few cases of people sharing the same last name in our dataset.&lt;/p&gt;
&lt;p&gt;The implementation is given via the function &lt;code&gt;key_name&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;key_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# parse name&lt;/span&gt;
    &lt;span class="n"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HumanName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;# Key is lowercased&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We add a &lt;code&gt;if&lt;/code&gt; statement to handle the special case occurring when
authors do not have any first name.&lt;/p&gt;
&lt;p&gt;That eventually leads to the new function &lt;code&gt;load_authors&lt;/code&gt;, scanning
the database to look for unique authors.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entrie&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entrie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;parse_authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this function &lt;code&gt;load_authors&lt;/code&gt;, we finally have all the ingredients
we need to build the coauthorship network with &lt;code&gt;networkx&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Building the graph with networkx&lt;/h3&gt;
&lt;p&gt;It remains now to build the graph with &lt;a href="https://networkx.github.io"&gt;networkx&lt;/a&gt;, a graph library written
in pure Python. We start by importing the library:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;networkx&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By using the function &lt;code&gt;load_authors&lt;/code&gt;, we could build a new function
adding for each author a new node in the graph &lt;code&gt;gx&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_add_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;id_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;correspondance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;id_node&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;gx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;correspondance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id_node&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;correspondance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The dictionary &lt;code&gt;correspondance&lt;/code&gt; stores the correspondence between
each author's key and its &lt;code&gt;id&lt;/code&gt; in the graph. That would be necessary to
build a metadata file associated to the graph.&lt;/p&gt;
&lt;p&gt;We could now process all articles in the database, and load a new edge
each time a new co-authorship is detected:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_add_edges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;correspondance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entrie&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entrie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="c1"&gt;# Parse names&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;parse_authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Add all corresponding edges&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;k1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;coname&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;k2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;k2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;correspondance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;correspondance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="n"&gt;gx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It remains to combine the two functions
&lt;code&gt;_add_nodes&lt;/code&gt; and &lt;code&gt;_add_edges&lt;/code&gt; to build a new graph from scratch. That writes out:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;gx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;correspondance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_add_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_add_edges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;correspondance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;correspondance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We build a new graph with&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build_graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bib_database&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number_of_nodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;7487&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number_of_edges&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;19046&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, at the end we get a graph with as many nodes as existing keys, and
19046 co-authorship relations :)&lt;/p&gt;
&lt;p&gt;It remains to dump the graph in &lt;code&gt;graphml&lt;/code&gt; format for future uses:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; nx.write_graphml&lt;span class="o"&gt;(&lt;/span&gt;g, &lt;span class="s2"&gt;&amp;quot;coauthors.graphml&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That would allow to load the graph in any graph library we want, as &lt;code&gt;graphml&lt;/code&gt;
is a standard format for graph.&lt;/p&gt;
&lt;h2&gt;Recap&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;So, we finally manage to build a coauthorship network from a bibtex file.
The network
we output correspond to the coauthorship network of the optimization community
in France. Let's emphasize the biases our process introduces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Almost 80% of the articles we processed were written after 2010. So
  we are missing the ancient history of the community and focus mostly on the
  most recent activity. Most of the seminal papers in optimization
  are not taken into account (think about the works of &lt;a href="https://en.wikipedia.org/wiki/Jean-Jacques_Moreau"&gt;Jean-Jacques Moreau&lt;/a&gt;
  or &lt;a href="https://en.wikipedia.org/wiki/Claude_Lemar%C3%A9chal"&gt;Claude Lemaréchal&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;No matter how frequent two authors write together, we affect a unit weight
  to each connection. Indeed, each time we add a coauthorship relation
  associated to an already existing edge, the function &lt;code&gt;add_edge&lt;/code&gt; overwrites
  the previous edge.&lt;/li&gt;
&lt;li&gt;We rely blindly on HAL's API, notably on its classification in subfields.
  However, whereas some authors write exclusively their articles in the &lt;code&gt;math-oc&lt;/code&gt;
  subfields, some others disseminate their articles in different subfields
  (operation research, automatics, signal processing). We miss authors who
  write their articles in different communities, who are more and more common these days.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note also that despite all my care, there might remain some mistakes
when extracting metadata from the bibtex file. Notably, if you have a better
idea to improve the key we affect to each name, feel free to update &lt;a href="https://github.com/frapac/carnets/blob/master/blog/coauthors/bibgraph.py"&gt;the
code on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a next blog post, we will analyze more closely
the structure of the graph of co-authors by using &lt;a href="https://juliagraphs.org/LightGraphs.jl/stable/"&gt;LightGraphs&lt;/a&gt;, a Julia
library dedicated for network analysis.&lt;/p&gt;</content><category term="Bibliography"></category><category term="Python"></category><category term="Bibliography"></category><category term="Networkx"></category><category term="Coauthorship network"></category></entry></feed>